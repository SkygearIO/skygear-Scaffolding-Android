apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    buildToolsVersion getBuildToolsVersionAtLeast("27.0.3")

    defaultConfig {
        applicationId "io.skygear.skygear_starter_project"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'io.skygear:skygear:1.6.0'
}

/**
 * Find a proper build tools version
 *
 * Ref. https://github.com/aayvazyan-tgm/autodetect_android_sdk_and_buildTools/blob/8ffc727ed87fb3370626e2ecbef078177ed33c86/sdktools.gradle
 *
 */
String androidSDKDir() {
    def sdkDir = android.getSdkDirectory().toString()
    return sdkDir
}

String[] buildToolsAvailable() {
    def buildToolsDir = new File(androidSDKDir(), "build-tools")
    String[] collection = buildToolsDir.list([accept:{ d, f-> !f.contains("android") }] as FilenameFilter)
    for (int i = 0; i < collection.length; i++) {
        String s = collection[i]
        collection[i] = s.replace("build-tools-","")
    }
    collection.sort { a, b -> b <=> a }
}

String getBuildToolsVersionAtLeast(String baseBuildToolsVersion) {
    def buildToolsVersions = buildToolsAvailable()
    if (buildToolsVersions.length == 0) {
        return baseBuildToolsVersion
    }

    def greatestVersion = buildToolsVersions[0]
    def greatestVersionTokenized = greatestVersion.tokenize('.')
    def baseVersionTokenized = baseBuildToolsVersion.tokenize('.')

    def isPassing = true
    for (int idx = 0;
         idx < greatestVersionTokenized.size() && idx < baseVersionTokenized.size();
         idx++
    ) {
        if (greatestVersionTokenized.get(idx) < baseVersionTokenized.get(idx)) {
            isPassing = false
            break
        }
    }

    if (isPassing) {
        println "Using build tools version: " + greatestVersion
        return greatestVersion
    }

    println "Fallback to build tools version: " + baseBuildToolsVersion
    return baseBuildToolsVersion
}
