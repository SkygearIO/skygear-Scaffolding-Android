// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: 'java'

import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }
}

clean << {
    delete rootProject.buildDir
}

task updateAppSettings {
    def templateDir = "template/"
    def appRootDir = "app/"
    def appSourceDir = "${appRootDir}src/main/java/io/skygear/skygear_starter_project/"
    def skygearEndpoint = ""
    def skygearApiKey = ""
    def installingPlugins = [] as LinkedList<String>
    def allowFilesOverwrite = false

    def Closure<String> prompt = {
        String question = "",
        String promptPrefix = "",
        Closure<Boolean> validation = { true } ->
            def console = System.console()
            if (console == null) {
                throw new Exception(
                        "Null console. Please make sure it is executed in terminal, " +
                        "not inside Android Studio")
            }

            if (question.length() > 0) {
                console.println("\n" + question)
            }

            def promptLine = "${promptPrefix} > "
            def result = null
            while (true) {
                result = console.readLine(promptLine)

                try {
                    if (validation(result)) {
                        break
                    }
                } catch (e) {
                    console.println("Error: ${e.message}")
                }

            }

            return result
    }

    doFirst {
        def filesToChange = [] as LinkedList<String>

        // Read skygear endpoint
        skygearEndpoint = prompt(
                "What is your skygear endpoint (You can find it in portal)?\n" +
                        "Example: https://myapp.skygeario.com/",
                "",
                { String result ->
                    if (result.length() == 0) {
                        return false
                    }

                    def url = new URL(result)
                    def protocol = url.protocol.toLowerCase()
                    def host = url.host.toLowerCase()
                    def path = url.path.toLowerCase()

                    if (!protocol.equals("http") && !protocol.equals("https")) {
                        throw new IllegalArgumentException("Only HTTP(S) is accepted.")
                    }

                    if (host.length() == 0) {
                        throw new IllegalArgumentException("Missing hostname.")
                    }

                    if (path.length() == 0) {
                        throw new IllegalArgumentException("Missing path.")
                    }

                    if (!path.substring(path.length() - 1).equals("/")) {
                        throw new IllegalArgumentException("Missing trailing slash")
                    }

                    return true
                }
        ).trim().toLowerCase()

        // Read API key
        skygearApiKey = prompt(
                "What is your skygear API key (You can find it in portal)?\n" +
                        "Example: dc0903fa85924776baa77df813901efc",
                "",
                { it.trim().length() != 0 }
        )
        filesToChange.add("MyApplication.java")

        // Read whether should install chat sdk
        def installChatSdkAnswer = prompt(
                "Do you want to install Skygear Chat extension? \n" +
                        "(The core SDK already got Auth, CloudDB, Push and Pubsub)",
                "[YES/no]",
                { it.length() == 0 || it.equalsIgnoreCase("yes") || it.equalsIgnoreCase("no") }
        ).trim().toLowerCase()

        if (installChatSdkAnswer.length() == 0 || installChatSdkAnswer.equals("yes")) {
            installingPlugins.add("io.skygear.plugins:chat:+")
            filesToChange.add("build.gradle")
        }

        if (filesToChange.size() > 0) {
            def question = String.format(
                    "The following files will be overwritten:\n%s\ncontinue?",
                    filesToChange.collect { "  - ${it}" }.join("\n")
            )
            allowFilesOverwrite = prompt(
                    question,
                    "[yes/no]",
                    { it.trim().equalsIgnoreCase("yes") || it.trim().equalsIgnoreCase("no") }
            ).trim().equalsIgnoreCase("yes")
        }
    }

    doLast {
        def console = System.console()
        if (console == null) {
            throw new Exception(
                    "Null console. Please make sure it is executed in terminal, " +
                    "not inside Android Studio")
        }

        if (!allowFilesOverwrite) {
            console.println("No files will be overwritten.")
            return
        }

        console.println("\nScaffolding with the following settings:")
        console.println("Endpoint: ${skygearEndpoint}")
        console.println("API key: ${skygearApiKey}")
        console.printf(
                "Installing Skygear Plugins: \n%s\n\n",
                installingPlugins.size() > 0
                        ? installingPlugins.collect { "  - ${it}" }.join("\n")
                        : "  None"
        )

        copy {
            from(templateDir)
            into(appSourceDir)
            include('MyApplication.java')
            filter(ReplaceTokens, tokens:[ENDPOINT: skygearEndpoint, APIKEY: skygearApiKey])
        }

        if (installingPlugins.size() > 0) {
            def pluginDependencies = installingPlugins
                    .collect { "compile '${it}'" }
                    .join("\n    ")
            copy {
                from(templateDir)
                into(appRootDir)
                include('build.gradle')
                filter(ReplaceTokens, tokens: [EXTRA_PLUGINS: pluginDependencies])
            }
        }
    }
}
